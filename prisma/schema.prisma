generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?   @unique
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String

  tokensEarned    Int               @default(0)
  wasteCollected  Float             @default(0)
  rank            Int?
  accounts        Account[]
  sessions        Session[]
  purchases       Purchase[]
  posts           Post[]
  WasteCollection WasteCollection[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model MarketplaceItem {
  id          String     @id @default(cuid())
  name        String
  description String
  tokenCost   Int
  image       String
  purchases   Purchase[]
}

model Purchase {
  id        String          @id @default(cuid())
  userId    String
  itemId    String
  tokenCost Int
  createdAt DateTime        @default(now())
  user      User            @relation(fields: [userId], references: [id])
  item      MarketplaceItem @relation(fields: [itemId], references: [id])
}

model Post {
  id        String   @id @default(cuid())
  content   String
  authorId  String
  likes     Int      @default(0)
  comments  Int      @default(0)
  createdAt DateTime @default(now())
  author    User     @relation(fields: [authorId], references: [id])
}

model WasteCollection {
  id        String   @id @default(cuid())
  userId    String
  wasteType String
  quantity  Float
  location  String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
}
